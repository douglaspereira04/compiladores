PROGRAM -> § symbolTable = SymbolTable() § STATEMENT
PROGRAM -> § symbolTable = SymbolTable() § FUNCLIST
PROGRAM -> &

FUNCLIST -> FUNCDEF FUNCLIST'
FUNCLIST' -> FUNCLIST
FUNCLIST' -> &

FUNCDEF -> def ident § symbolTable = SymbolTable(parent=symbolTable) § ( PARAMLIST ) { STATELIST } § symbolTable = symbolTable.parent §

PARAMLIST -> &
PARAMLIST -> TYPE ident PARAMLIST' 
PARAMLIST' -> &
PARAMLIST' -> , PARAMLIST
TYPE -> int
TYPE -> float
TYPE -> string

STATEMENT -> VARDECL ;  
STATEMENT -> ATRIBSTAT ;  
STATEMENT -> PRINTSTAT ;  
STATEMENT -> READSTAT ;  
STATEMENT -> RETURNSTAT ;  
STATEMENT -> IFSTAT
STATEMENT -> FORSTAT 
STATEMENT -> § symbolTable = SymbolTable(parent=symbolTable) § { STATELIST } § symbolTable = symbolTable.parent §
STATEMENT -> break ;  
STATEMENT -> ; 

VARDECL -> int ident INT_INDEX
VARDECL -> float ident INT_INDEX
VARDECL -> string ident INT_INDEX

INT_INDEX -> [ int_constant ] INT_INDEX
INT_INDEX -> &

ATRIBSTAT -> LVALUE = ATRIBSTAT'
ATRIBSTAT' -> EXPRESSION
ATRIBSTAT' -> ALLOCEXPRESSION
ATRIBSTAT' -> ident ATRIBSTAT''
ATRIBSTAT'' -> ( PARAMLISTCALL )
ATRIBSTAT'' -> NUM_INDEX TERM' NUMEXPRESSION' EXPRESSION'

FUNCCALL -> ident ( PARAMLISTCALL )
PARAMLISTCALL -> ident PARAMLISTCALL'
PARAMLISTCALL -> &
PARAMLISTCALL' -> &
PARAMLISTCALL' -> , PARAMLISTCALL

PRINTSTAT -> print EXPRESSION'''
READSTAT -> read LVALUE
RETURNSTAT -> return

IFSTAT -> if ( EXPRESSION''' ) STATEMENT IFSTAT'
IFSTAT' -> else STATEMENT endif
IFSTAT' -> endif

FORSTAT -> for ( ATRIBSTAT ;  EXPRESSION''' ;  ATRIBSTAT ) STATEMENT

STATELIST -> STATEMENT STATELIST'
STATELIST' -> &
STATELIST' -> STATELIST

ALLOCEXPRESSION -> new TYPE ALLOC_SIZE

ALLOC_SIZE -> [ NUMEXPRESSION''' ] ALLOC_SIZE'
ALLOC_SIZE' -> ALLOC_SIZE
ALLOC_SIZE' -> &

EXPRESSION''' -> ident NUM_INDEX TERM' NUMEXPRESSION' EXPRESSION'
EXPRESSION''' -> EXPRESSION

EXPRESSION -> NUMEXPRESSION EXPRESSION'
EXPRESSION' -> &
EXPRESSION' -> RELOP EXPRESSION''
EXPRESSION'' -> ident NUM_INDEX TERM' NUMEXPRESSION'
EXPRESSION'' -> NUMEXPRESSION

RELOP -> < OREQ
RELOP -> > OREQ
RELOP -> = =
RELOP -> ! =

OREQ -> =
OREQ -> &

NUMEXPRESSION'''-> NUMEXPRESSION
NUMEXPRESSION'''-> ident NUM_INDEX TERM' NUMEXPRESSION'

NUMEXPRESSION -> TERM NUMEXPRESSION'
NUMEXPRESSION' -> SUM NUMEXPRESSION''
NUMEXPRESSION' -> &
NUMEXPRESSION'' -> ident NUM_INDEX TERM' NUMEXPRESSION'
NUMEXPRESSION'' -> TERM NUMEXPRESSION'

SUM -> +
SUM -> -

TERM -> UNARYEXPR TERM'
TERM' -> &
TERM' -> MULTI TERM''
TERM'' -> UNARYEXPR TERM'
TERM'' -> ident NUM_INDEX TERM'

MULTI -> *
MULTI -> /
MULTI -> %

UNARYEXPR -> FACTOR
UNARYEXPR -> SUM UNARYEXPR'
UNARYEXPR' -> FACTOR
UNARYEXPR' -> ident NUM_INDEX

FACTOR -> int_constant 
FACTOR -> float_constant 
FACTOR -> string_constant 
FACTOR -> null
FACTOR -> ( NUMEXPRESSION )

LVALUE -> ident NUM_INDEX
NUM_INDEX -> [ NUMEXPRESSION''' ] NUM_INDEX
NUM_INDEX -> &
